//! Autogenerated weights for orml_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-18, STEPS: `50`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("/home/ubuntu/frequency/res/genesis/testnet/frequency-spec-rococo-testnet.json"), DB CACHE: 1024

// Executed Command:
// /home/ubuntu/frequency/target/release/frequency
// benchmark
// pallet
// --pallet
// orml_vesting
// --extrinsic
// *
// --chain=/home/ubuntu/frequency/res/genesis/testnet/frequency-spec-rococo-testnet.json
// --execution
// wasm
// --wasm-execution
// compiled
// --steps
// 50
// --repeat
// 10
// --output
// ./orml_vesting_weights.rs
// --template=/home/ubuntu/frequency/.maintain/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for orml_vesting.
pub trait WeightInfo {
	fn vested_transfer() -> Weight;
	fn claim(i: u32, ) -> Weight;
	fn update_vesting_schedules(i: u32, ) -> Weight;
}

/// Weights for orml_vesting using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: unknown [0x3a7472616e73616374696f6e5f6c6576656c3a] (r:1 w:1)
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: Vesting VestingSchedules (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: Balances Locks (r:1 w:1)
	fn vested_transfer() -> Weight {
		(75_512_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: unknown [0x3a7472616e73616374696f6e5f6c6576656c3a] (r:1 w:1)
	// Storage: ParachainSystem ValidationData (r:1 w:0)
	// Storage: Vesting VestingSchedules (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	/// The range of component `i` is `[1, 50]`.
	fn claim(i: u32, ) -> Weight {
		(40_424_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((138_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: unknown [0x3a7472616e73616374696f6e5f6c6576656c3a] (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Balances Locks (r:1 w:1)
	// Storage: Vesting VestingSchedules (r:0 w:1)
	/// The range of component `i` is `[1, 50]`.
	fn update_vesting_schedules(i: u32, ) -> Weight {
		(38_949_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((89_000 as Weight).saturating_mul(i as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
}
