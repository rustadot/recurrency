//! Autogenerated weights for pallet_utility
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-11, STEPS: `20`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("./res/genesis/frequency-weights.json"), DB CACHE: 1024

// Executed Command:
// ./target/release/frequency
// benchmark
// pallet
// --chain
// ./res/genesis/frequency-weights.json
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_utility
// --extrinsic
// *
// --steps
// 20
// --repeat
// 5
// --output
// ./runtime/frequency/src/weights
// --template=./.maintain/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_utility.
pub trait WeightInfo {
	fn batch(c: u32, ) -> Weight;
	fn as_derivative() -> Weight;
	fn batch_all(c: u32, ) -> Weight;
	fn dispatch_as() -> Weight;
	fn force_batch(c: u32, ) -> Weight;
}

/// Weights for pallet_utility using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_utility::WeightInfo for SubstrateWeight<T> {
	/// The range of component `c` is `[0, 1000]`.
	fn batch(c: u32, ) -> Weight {
		(62_325_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((7_804_000 as Weight).saturating_mul(c as Weight))
	}
	fn as_derivative() -> Weight {
		(12_000_000 as Weight)
	}
	/// The range of component `c` is `[0, 1000]`.
	fn batch_all(c: u32, ) -> Weight {
		(29_983_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((8_167_000 as Weight).saturating_mul(c as Weight))
	}
	fn dispatch_as() -> Weight {
		(28_000_000 as Weight)
	}
	/// The range of component `c` is `[0, 1000]`.
	fn force_batch(c: u32, ) -> Weight {
		(42_460_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((7_849_000 as Weight).saturating_mul(c as Weight))
	}
}
