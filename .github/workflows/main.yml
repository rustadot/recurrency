on:
  push:
    branches: [main]
name: Build Main
jobs:
  build_prep:
    name: build-prep
    runs-on: 'ubuntu-latest'
    outputs:
      matrix: ${{ steps.set-build-param.outputs.matrix }}
    steps:
      # Required as the JSON input file needs to be read
      - uses: actions/checkout@v3
      - id: set-build-param
        uses: JoshuaTheMiller/conditional-build-matrix@b9af2b1b137d7bd7818c1233ef830b326809a7cc
        with:
          inputFile: '.github/workflows/build-params.json'
          # we run build-node on every workflow but build-runtime only on pushes to branches
          filter: '[?run_on_event==`any` || run_on_event==`${{ github.event_name }}`]'
  build:
    needs: build_prep
    strategy:
      matrix: ${{fromJson(needs.build_prep.outputs.matrix)}}
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    env:
      RUST_TOOLCHAIN: "nightly-2021-11-07"
    steps:
      - name: Free space on Ubuntu
        if: ${{ matrix.os }} == 'ubuntu-latest'
        run: |
          echo "Pre cleanup"
          df -h
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          echo "Post cleanup"
          df -h
      - name: Check out code
        uses: actions/checkout@v3
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          default: true
      - if: matrix.target == 'build-runtime'
        uses: Swatinem/rust-cache@v1
        with: # cache the runtime target instead of root target for build-runtime
          working-directory: './runtime'
          target-dir: './target/mrc'
      - if: matrix.target == 'build-node'
        uses: Swatinem/rust-cache@v1
      - name: ${{ matrix.target }}
        run: ./ci/build.sh
        env:
          TARGET: ${{ matrix.target }}
          RUST_TOOLCHAIN: ${{ matrix.rust_toolchain }}
          PACKAGE: ${{matrix.package}}
      - name: Build MRC related specs and wasm 📝
        if: matrix.target == 'build-node'
        run: ./scripts/generate_specs.sh 2000 true
      - name: Create tarball  of specs and wasm 📦
        if: matrix.target == 'build-node'
        run: tar -cvf mrc_specs.tar ./res/genesis
      - name: Upload mrc spec and wasm artifacts 📦
        if: matrix.target == 'build-node'
        uses: actions/upload-artifact@v3
        with:
          name: mrc_rococo_2000_specs-${{ github.sha }}
          path: mrc_specs.tar
      - name: Set up Docker Buildx
        if: matrix.target == 'build-node'
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        if: matrix.target == 'build-node'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get the tag name
        if: matrix.target == 'build-node'
        run: |
          date_tag=$(date +'%Y%m%d-%H%M')
          echo ${date_tag}
          echo "TAG=${date_tag}" >> $GITHUB_ENV
      - name: Build and push dsnp/mrc
        if: matrix.target == 'build-node'
        id: docker_build_mrc
        uses: docker/build-push-action@v2
        with:
          push: true
          file: Dockerfile
          tags: |
            dsnp/mrc:${{ env.TAG }}
            dsnp/mrc:latest
