name: Release
concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: true
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+" # ex. v0.29.9
      - "v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+" # ex. v0.29.9-rc1
      - "vX.X.X" # used for testing only
env:
  RUST_TOOLCHAIN: nightly-2022-09-22 # Update this when updating the Rust toolchain
  NEW_RELEASE_VERSION: ${{github.ref_name}}
  NEW_RELEASE_TAG: ${{github.ref_name}}
jobs:
  build-binaries:
    name: Build ${{matrix.arch}} Binary for ${{matrix.network}}
    strategy:
      matrix:
        # os: [[self-hosted, Linux, X64], [self-hosted, Linux, ARM64]]
        os: [[self-hosted, Linux, X64]]
        network: [local, rococo, mainnet]
        include:
          - network: local
            spec: frequency-rococo-local
            build-profile: release
            release-file-name-prefix: frequency-local
          - network: rococo
            spec: frequency-rococo-testnet
            build-profile: production
            release-file-name-prefix: frequency-rococo
          - network: mainnet
            spec: frequency
            build-profile: production
            release-file-name-prefix: frequency
          - os: [self-hosted, Linux, X64]
            arch: amd64
          # - os: [self-hosted, Linux, ARM64]
          #   arch: arm64
    runs-on: ${{matrix.os}}
    steps:
      - name: Set Global Env Vars
        run: |
          echo "BIN_DIR=target/${{matrix.build-profile}}" >> $GITHUB_ENV
          echo "BUILT_BIN_FILENAME=frequency" >> $GITHUB_ENV
          echo "RELEASE_BIN_FILENAME=${{matrix.release-file-name-prefix}}.${{matrix.arch}}" >> $GITHUB_ENV
      - name: Set Ubuntu Env Vars
        run: |
          echo "HOME=/root" >> $GITHUB_ENV
      - name: Check Out Repo
        uses: actions/checkout@v3
      # # XXX Keep this step as it lets us skip full binary builds during development/testing
      # - name: Cache Binary for Testing
      #   id: cache-binary
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{env.BIN_DIR}}/${{env.BUILT_BIN_FILENAME}}
      #     key: binaries-${{runner.os}}-${{matrix.network}}-${{matrix.arch}}-${{env.NEW_RELEASE_VERSION}}
      - name: Install Rust Toolchain
        if: steps.cache-binary.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: wasm32-unknown-unknown
      # - name: Cache Rust Dependencies
      #   if: steps.cache-binary.outputs.cache-hit != 'true'
      #   uses: Swatinem/rust-cache@359a70e43a0bb8a13953b04a90f76428b4959bb6
      #   with:
      #     shared-key: ${{env.RUST_TOOLCHAIN}}
      - name: Compile for ${{matrix.network}}
        if: steps.cache-binary.outputs.cache-hit != 'true'
        run: |
          CARGO_INCREMENTAL=0 RUSTFLAGS="-D warnings" cargo build \
            --locked \
            --features ${{matrix.spec}} \
            --profile ${{matrix.build-profile}}
      - name: Run Sanity Checks
        run: |
          file ${{env.BIN_DIR}}/${{env.BUILT_BIN_FILENAME}} && \
            ${{env.BIN_DIR}}/${{env.BUILT_BIN_FILENAME}} --version
      - name: Rename Binary
        run: |
          cp -p ${{env.BIN_DIR}}/${{env.BUILT_BIN_FILENAME}} \
            ${{env.BIN_DIR}}/${{env.RELEASE_BIN_FILENAME}}
      - name: Generate Binary Hash
        working-directory: ${{env.BIN_DIR}}
        run: sha256sum ${{env.RELEASE_BIN_FILENAME}} > ${{env.RELEASE_BIN_FILENAME}}.sha256
      - name: Import GPG key
        id: import-gpg
        # Pinning it to the exact version since this touches our private key
        uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549
        with:
          gpg_private_key: ${{secrets.FREQUENCY_PGP_SECRET_SUBKEYS}}
          passphrase: ${{secrets.FREQUENCY_PGP_MASTER_KEY_PASSWORD}}
          fingerprint: B6327D1474C6392032870E8EFA4FD1E73A0FE707 # signing subkey
      - name: Generate Binary Signature
        working-directory: ${{env.BIN_DIR}}
        run: gpg --detach-sign --armor ${{env.RELEASE_BIN_FILENAME}}
      - name: Verify Binary
        working-directory: ${{env.BIN_DIR}}
        run: gpg --verify ${{env.RELEASE_BIN_FILENAME}}.asc
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{github.run_id}}
          path: |
            ${{env.BIN_DIR}}/${{env.RELEASE_BIN_FILENAME}}
            ${{env.BIN_DIR}}/${{env.RELEASE_BIN_FILENAME}}.sha256
            ${{env.BIN_DIR}}/${{env.RELEASE_BIN_FILENAME}}.asc
          if-no-files-found: error

  build-runtimes:
    name: Build Runtime for ${{matrix.network}}
    outputs:
      runtime_filename_rococo: ${{steps.set-env-vars.outputs.runtime_filename_rococo}}
      runtime_filename_mainnet: ${{steps.set-env-vars.outputs.runtime_filename_mainnet}}
    strategy:
      matrix:
        network: [rococo, mainnet]
        include:
          - network: rococo
            build-profile: production
            package: frequency-runtime
            runtime-dir: runtime/frequency
            built-wasm-file-name-prefix: frequency_runtime
            release-wasm-file-name-prefix: frequency-rococo_runtime
            features: frequency-rococo-testnet
            wasm-core-version: frequency-rococo
          - network: mainnet
            build-profile: production
            package: frequency-runtime
            runtime-dir: runtime/frequency
            built-wasm-file-name-prefix: frequency_runtime
            release-wasm-file-name-prefix: frequency_runtime
            features: frequency
            wasm-core-version: frequency
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Set Ubuntu Env Vars
        run: |
          echo "HOME=/root" >> $GITHUB_ENV
      - name: Check Out Repo
        uses: actions/checkout@v3
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          default: true
          profile: minimal
          toolchain: stable
      - name: Extract Runtime Spec Version
        run: |
          echo "RUNTIME_SPEC_VERSION=$(sed -nr 's/spec_version:\s*([0-9]+),/\1/p' \
            ${{matrix.runtime-dir}}/src/lib.rs | tr -d '[:space:]')" >> $GITHUB_ENV
      - name: Validate Extracted Version
        run: |
          echo "Runtime Spec Version:|${{env.RUNTIME_SPEC_VERSION}}|"
          echo "Runtime Spec Version:||$RUNTIME_SPEC_VERSION||"
          [[ $RUNTIME_SPEC_VERSION == ?(-)+([0-9]) ]] || \
            (echo "ERROR: \"${{env.RUNTIME_SPEC_VERSION}}\" is not a valid integer" && exit 1)
      - name: Set Env Vars
        id: set-env-vars
        run: |
          set -x
          echo "WASM_DIR=${{matrix.runtime-dir}}/target/srtool/${{matrix.build-profile}}/wbuild/${{matrix.package}}" >> $GITHUB_ENV
          echo "BUILT_WASM_FILENAME=${{matrix.built-wasm-file-name-prefix}}.compact.compressed.wasm" >> $GITHUB_ENV
          release_wasm_filename=${{matrix.release-wasm-file-name-prefix}}-v${{env.RUNTIME_SPEC_VERSION}}.${{env.NEW_RELEASE_VERSION}}.compact.compressed.wasm
          echo "RELEASE_WASM_FILENAME=$release_wasm_filename" >> $GITHUB_ENV
          echo "runtime_filename_${{matrix.network}}=$release_wasm_filename" >> $GITHUB_OUTPUT
      # # XXX Keep this step as it lets us skip WASM builds during development/testing
      # - name: Cache WASM for Testing
      #   id: cache-wasm
      #   uses: actions/cache@v3
      #   with:
      #     path: ${{env.WASM_DIR}}/${{env.BUILT_WASM_FILENAME}}
      #     key: runtimes-${{runner.os}}-${{matrix.network}}-${{env.NEW_RELEASE_VERSION}}
      - name: Install srtool-cli
        if: steps.cache-wasm.outputs.cache-hit != 'true'
        run: |
          cargo install --git https://github.com/chevdor/srtool-cli
          srtool --version
      - name: Build Deterministic WASM
        if: steps.cache-wasm.outputs.cache-hit != 'true'
        run: |
          set -ex
          RUST_LOG=debug srtool build \
            --build-opts="'--features on-chain-release-build,no-metadata-docs,${{matrix.features}}'" \
            --profile=${{matrix.build-profile}} \
            --package=${{matrix.package}} \
            --root
      - name: Rename WASM file
        run: |
          cp -p ./${{env.WASM_DIR}}/${{env.BUILT_WASM_FILENAME}} \
            ./${{env.WASM_DIR}}/${{env.RELEASE_WASM_FILENAME}}
      - name: Install subwasm
        if: steps.cache-wasm.outputs.cache-hit != 'true'
        run: |
          cargo install --locked --git https://github.com/chevdor/subwasm --tag v0.18.0 --force
          subwasm --version
      - name: Test WASM file
        if: steps.cache-wasm.outputs.cache-hit != 'true'
        run: |
          subwasm info ${{env.WASM_DIR}}/${{env.RELEASE_WASM_FILENAME}}
          subwasm info ${{env.WASM_DIR}}/${{env.RELEASE_WASM_FILENAME}} | grep "Core version:.*${{matrix.wasm-core-version}}-${{env.RUNTIME_SPEC_VERSION}}" || \
            (echo "ERROR: WASM Core version didn't match ${{matrix.wasm-core-version}}-${{env.RUNTIME_SPEC_VERSION}}" && exit 1)
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifacts-${{github.run_id}}
          path: ${{env.WASM_DIR}}/${{env.RELEASE_WASM_FILENAME}}
          if-no-files-found: error

  build-rust-developer-docs:
    name: Build Rust Developer Docs
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Set Ubuntu Env Vars
        run: echo "HOME=/root" >> $GITHUB_ENV
      - name: Check Out Repo
        uses: actions/checkout@v3
      - name: Install Required Packages
        run: |
          sudo apt-get update
          sudo apt install -y protobuf-compiler
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          toolchain: stable
          default: true
          profile: minimal
          target: wasm32-unknown-unknown
      # - name: Cache Rust Dependencies
      #   uses: Swatinem/rust-cache@359a70e43a0bb8a13953b04a90f76428b4959bb6
      #   with:
      #     shared-key: ${{env.RUST_TOOLCHAIN}}
      - name: Build Docs
        run: |
          RUSTDOCFLAGS="--enable-index-page -Zunstable-options" cargo doc --no-deps
      - name: Upload Docs
        uses: actions/upload-artifact@v3
        with:
          name: rust-developer-docs-${{github.run_id}}
          path: ./target/doc
          if-no-files-found: error

  build-js-api-augment:
    needs: build-binaries
    name: Build JS API Augment
    strategy:
      matrix:
        os: [ubuntu-20.04]
        network: [mainnet]
        include:
          - network: mainnet
            spec: frequency
            build-profile: production
            release-file-name-prefix: frequency
          - os: ubuntu-20.04
            arch: amd64
    runs-on: ${{matrix.os}}
    steps:
      - name: Set Env Vars
        run: |
          echo "BIN_DIR=target/${{matrix.build-profile}}" >> $GITHUB_ENV
          echo "RELEASE_BIN_FILENAME=${{matrix.release-file-name-prefix}}.${{matrix.arch}}" >> $GITHUB_ENV
      - name: Check Out Repo
        uses: actions/checkout@v3
      - name: Set up NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          registry-url: "https://registry.npmjs.org"
          cache-dependency-path: js/api-augment/package-lock.json
      - name: Install
        run: npm install # DO NOT use `npm ci` as we want the latest polkadot/api possible
        working-directory: js/api-augment
      - name: Download Binary Artifacts
        id: download
        uses: actions/download-artifact@v3
        with:
          name: artifacts-${{github.run_id}}
          path: .
      - name: Move Binary to Target Dir
        run: |
          mkdir -p ${{env.BIN_DIR}}
          mv ${{env.RELEASE_BIN_FILENAME}} ${{env.BIN_DIR}}
          chmod 755 ${{env.BIN_DIR}}/${{env.RELEASE_BIN_FILENAME}}
      - name: Output Metadata
        run: ${{env.BIN_DIR}}/${{env.RELEASE_BIN_FILENAME}} export-metadata ./js/api-augment/metadata.json
      - name: Build
        run: npm run build
        working-directory: js/api-augment
      - name: Upload Dist Dir
        uses: actions/upload-artifact@v3
        with:
          name: js-api-augment-${{github.run_id}}
          path: js/api-augment/dist
          if-no-files-found: error

  version-check:
    needs: build-binaries
    name: Test Version Matches Release
    strategy:
      matrix:
        os: [ubuntu-20.04]
        network: [mainnet]
        include:
          - network: mainnet
            spec: frequency
            build-profile: production
            release-file-name-prefix: frequency
          - os: ubuntu-20.04
            arch: amd64
    runs-on: ${{matrix.os}}
    steps:
      - name: Set Env Vars
        run: |
          echo "BIN_DIR=target/${{matrix.build-profile}}" >> $GITHUB_ENV
          echo "BUILT_BIN_FILENAME=frequency" >> $GITHUB_ENV
          echo "RELEASE_BIN_FILENAME=${{matrix.release-file-name-prefix}}.${{matrix.arch}}" >> $GITHUB_ENV
      - name: Check Out Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download Binary Artifacts
        id: download
        uses: actions/download-artifact@v3
        with:
          name: artifacts-${{github.run_id}}
          path: .
      - name: Move Binary to Target Dir
        run: |
          mkdir -p ${{env.BIN_DIR}}
          mv ${{env.RELEASE_BIN_FILENAME}} ${{env.BIN_DIR}}/${{env.BUILT_BIN_FILENAME}}
          chmod +x ${{env.BIN_DIR}}/${{env.BUILT_BIN_FILENAME}}
      - name: Testing Version Match
        if: env.NEW_RELEASE_TAG != 'vX.X.X'
        run: |
          EXPECTED_VERSION="${{env.NEW_RELEASE_VERSION}}+polkadot$(make version-polkadot)"
          ACTUAL_VERSION="v$(${{env.BIN_DIR}}/${{env.BUILT_BIN_FILENAME}} --version | cut -d " " -f 2)"
          echo "Expected: ${EXPECTED_VERSION}"
          echo "  Actual: ${ACTUAL_VERSION%-*}"
          [[ ${ACTUAL_VERSION%-*} == ${EXPECTED_VERSION} ]]

  wait-for-all-builds:
    needs:
      [
        version-check,
        build-binaries,
        build-runtimes,
        build-rust-developer-docs,
        build-js-api-augment,
      ]
    name: Wait for All Builds to Finish
    runs-on: ubuntu-20.04
    outputs:
      runtime_filename_rococo: ${{needs.build-runtimes.outputs.runtime_filename_rococo}}
      runtime_filename_mainnet: ${{needs.build-runtimes.outputs.runtime_filename_mainnet}}
    steps:
      - name: Proceed Forward
        run: echo "All build jobs have finished, proceeding with the release"

  release-artifacts:
    needs: wait-for-all-builds
    name: Release Built Artifacts
    runs-on: ubuntu-20.04
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Full Release?
        run: |
          set -x
          is_full_release=$([[ "$NEW_RELEASE_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] && \
            echo 'true' || echo 'false')
          echo "is_full_release: $is_full_release"
          echo "IS_FULL_RELEASE=$is_full_release" >> $GITHUB_ENV
      - name: Get Latest Release Tag
        run: |
          set -x
          git show-ref --tags -d
          latest_tag_commit=$(git show-ref --tags -d | grep latest^{} | cut -d' ' -f1)
          latest_release_tag=$(git show-ref --tags -d | grep "^$latest_tag_commit" | \
            grep refs/tags/v | sed -e 's,.* refs/tags/,,' -e 's/\^{}//')
          echo "latest_release_tag: $latest_release_tag"
          echo "PREVIOUS_RELEASE_TAG=$latest_release_tag" >> $GITHUB_ENV
      - name: Install Tera CLI
        if: steps.cache-tera.outputs.cache-hit != 'true'
        run: |
          cargo install --git https://github.com/chevdor/tera-cli
          tera --version
      - name: Build Changelog
        id: build-changelog
        uses: mikepenz/release-changelog-builder-action@da6847f9fdcb3211124cd0c078c1d0359b103ee5
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          fromTag: ${{env.PREVIOUS_RELEASE_TAG}}
          toTag: ${{env.NEW_RELEASE_TAG}}
          configurationJson: |
            {
              "template": "#{{UNCATEGORIZED}}",
              "pr_template": "- #{{TITLE}} ##{{NUMBER}}",
              "empty_template": "- No changes",
              "transformers": [
                {
                  "pattern": "- (.*)",
                  "target": "- $1|n|"
                }
              ]
            }
      - name: Sanitize Changelog
        id: sanitize-changelog
        run: |
          echo "original: ${{steps.build-changelog.outputs.changelog}}"
          echo "1---------------------"
          changelog='${{steps.build-changelog.outputs.changelog}}'
          clean="${changelog//[\`\[\]$'\n']/}"
          echo "sanitized: $clean"
          echo "2---------------------"
          echo "sanitized=$clean" >> $GITHUB_OUTPUT
      - name: Get Polkadot Version
        id: polkadot-version
        run: echo "version=$(make version-polkadot)" >> $GITHUB_OUTPUT
      - name: Download Binary Artifacts
        id: download
        uses: actions/download-artifact@v3
        with:
          name: artifacts-${{github.run_id}}
          path: /tmp
      - name: List Downloaded Artifacts
        working-directory: /tmp
        run: |
          ls -la frequency*.*
      - name: Install subwasm
        run: |
          cargo install --locked --git https://github.com/chevdor/subwasm --tag v0.18.0 --force
          subwasm --version
      - name: Get Runtimes Info
        id: get-runtimes-info
        working-directory: /tmp
        run: |
          set -x
          runtime_filename_rococo=${{needs.wait-for-all-builds.outputs.runtime_filename_rococo}}
          runtime_info_rococo=$(subwasm info $runtime_filename_rococo | sed -Ez '$ s/\n+$//' | tr '\n' '|')
          echo "runtime_info_rococo=$runtime_info_rococo" >> $GITHUB_OUTPUT
          runtime_filename_mainnet=${{needs.wait-for-all-builds.outputs.runtime_filename_mainnet}}
          runtime_info_mainnet=$(subwasm info $runtime_filename_mainnet | sed -Ez '$ s/\n+$//' | tr '\n' '|')
          echo "runtime_info_mainnet=$runtime_info_mainnet" >> $GITHUB_OUTPUT
      - name: Generate Release Notes
        working-directory: tools/ci/release-notes
        run: |
          set -x
          ./build-release-notes.sh '${{steps.polkadot-version.outputs.version}}' \
            '${{steps.sanitize-changelog.outputs.sanitized}}' \
            '${{steps.get-runtimes-info.outputs.runtime_info_rococo}}' \
            '${{steps.get-runtimes-info.outputs.runtime_info_mainnet}}' \
            > release-notes.md
      - name: Publish Release on GitHub
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
        with:
          body_path: tools/ci/release-notes/release-notes.md
          files: /tmp/frequency*.*
      - name: Update latest tag
        if: env.IS_FULL_RELEASE == 'true'
        uses: rickstaa/action-create-tag@87a112438ed8b80a2ae25dcf8f11d4949dc4f740
        with:
          tag: "latest"
          force_push_tag: true
          message: "Latest full release"
      - name: Trigger Auto-signer Workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GHA_WORKFLOW_TRIGGER }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'LibertyDSNP',
              repo: 'metadata-portal',
              workflow_id: 'auto-sign.yml',
              ref: 'main'
            })

  release-node-images:
    needs: wait-for-all-builds
    name: Release ${{matrix.arch}} Node Docker Image for ${{matrix.network}}
    strategy:
      matrix:
        arch: [amd64]
        network: [rococo, mainnet]
        include:
          - network: rococo
            build-profile: production
            release-file-name-prefix: frequency-rococo
          - network: mainnet
            build-profile: production
            release-file-name-prefix: frequency
          - arch: amd64
            docker-platform: linux/amd64
    env:
      DOCKER_HUB_PROFILE: frequencychain
      IMAGE_NAME: parachain-node
    runs-on: ubuntu-20.04
    steps:
      - name: Set Env Vars
        run: |
          echo "BIN_DIR=target/${{matrix.build-profile}}" >> $GITHUB_ENV
          echo "BUILT_BIN_FILENAME=frequency" >> $GITHUB_ENV
          echo "RELEASE_BIN_FILENAME=${{matrix.release-file-name-prefix}}.${{matrix.arch}}" >> $GITHUB_ENV
      - name: Check Out Repo
        uses: actions/checkout@v3
      - name: Download Binary Artifacts
        id: download
        uses: actions/download-artifact@v3
        with:
          name: artifacts-${{github.run_id}}
          path: .
      - name: Move Binary to Target Dir
        run: |
          mkdir -p ${{env.BIN_DIR}}
          mv ${{env.RELEASE_BIN_FILENAME}} ${{env.BIN_DIR}}/${{env.BUILT_BIN_FILENAME}}
          chmod +x ${{env.BIN_DIR}}/${{env.BUILT_BIN_FILENAME}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{matrix.arch}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKERHUB_USERNAME_FC}}
          password: ${{secrets.DOCKERHUB_TOKEN_FC}}
      - name: Build and Push Parachain Image
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{matrix.docker-platform}}
          push: true
          file: ./docker/${{env.IMAGE_NAME}}.dockerfile
          tags: |
            ${{env.DOCKER_HUB_PROFILE}}/${{env.IMAGE_NAME}}-${{matrix.network}}:${{env.NEW_RELEASE_VERSION}}
            ${{env.DOCKER_HUB_PROFILE}}/${{env.IMAGE_NAME}}-${{matrix.network}}:latest
      - name: Update DockerHub Description
        uses: peter-evans/dockerhub-description@93b93397c27ed52b4055b8c6b2f8d92456ab3c56
        with:
          username: ${{secrets.DOCKERHUB_USERNAME_FC}}
          password: ${{secrets.DOCKERHUB_TOKEN_FC}}
          repository: ${{env.DOCKER_HUB_PROFILE}}/${{env.IMAGE_NAME}}-${{matrix.network}}
          readme-filepath: docker/${{env.IMAGE_NAME}}-${{matrix.network}}.overview.md

  release-dev-images:
    needs: wait-for-all-builds
    name: Release Dev Docker Image for ${{matrix.node}}
    strategy:
      matrix:
        network: [local]
        arch: [amd64]
        node: [collator-node-local, instant-seal-node]
        include:
          - network: local
            build-profile: release
          - arch: amd64
            docker-platform: linux/amd64
    env:
      DOCKER_HUB_PROFILE: frequencychain
    runs-on: ubuntu-20.04
    steps:
      - name: Set Env Vars
        run: |
          echo "BIN_DIR=target/${{matrix.build-profile}}" >> $GITHUB_ENV
          echo "BUILT_BIN_FILENAME=frequency" >> $GITHUB_ENV
          echo "RELEASE_BIN_FILENAME=frequency-${{matrix.network}}.${{matrix.arch}}" >> $GITHUB_ENV
      - name: Check Out Repo
        uses: actions/checkout@v3
      - name: Download Binary Artifacts
        id: download
        uses: actions/download-artifact@v3
        with:
          name: artifacts-${{github.run_id}}
          path: .
      - name: Move Binary to Target Dir
        run: |
          mkdir -p ${{env.BIN_DIR}}
          mv ${{env.RELEASE_BIN_FILENAME}} ${{env.BIN_DIR}}/${{env.BUILT_BIN_FILENAME}}
          chmod +x ${{env.BIN_DIR}}/${{env.BUILT_BIN_FILENAME}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{matrix.arch}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKERHUB_USERNAME_FC}}
          password: ${{secrets.DOCKERHUB_TOKEN_FC}}
      - name: Build and Push Dev Image
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{matrix.docker-platform}}
          push: true
          file: ./docker/${{matrix.node}}.dockerfile
          tags: |
            ${{env.DOCKER_HUB_PROFILE}}/${{matrix.node}}:${{env.NEW_RELEASE_VERSION}}
            ${{env.DOCKER_HUB_PROFILE}}/${{matrix.node}}:latest
      - name: Update DockerHub Description
        uses: peter-evans/dockerhub-description@93b93397c27ed52b4055b8c6b2f8d92456ab3c56
        with:
          username: ${{secrets.DOCKERHUB_USERNAME_FC}}
          password: ${{secrets.DOCKERHUB_TOKEN_FC}}
          repository: ${{env.DOCKER_HUB_PROFILE}}/${{matrix.node}}
          readme-filepath: docker/${{matrix.node}}.overview.md

  release-rust-developer-docs:
    needs: wait-for-all-builds
    name: Release Rust Developer Docs
    runs-on: ubuntu-20.04
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3
      - name: Download Docs
        id: download
        uses: actions/download-artifact@v3
        with:
          name: rust-developer-docs-${{github.run_id}}
          path: ./target/doc
      - name: Deploy Frequency docs to gh-pages
        uses: JamesIves/github-pages-deploy-action@ba1486788b0490a235422264426c45848eac35c6
        with:
          branch: gh-pages
          folder: ./target/doc

  release-js-api-augment:
    needs: wait-for-all-builds
    name: Release JS API Augment
    runs-on: ubuntu-20.04
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v3
      - name: Set up NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"
          registry-url: "https://registry.npmjs.org"
          cache-dependency-path: js/api-augment/package-lock.json
      - name: Download Dist Dir
        id: download
        uses: actions/download-artifact@v3
        with:
          name: js-api-augment-${{github.run_id}}
          path: js/api-augment/dist
      - name: Version Package
        if: env.NEW_RELEASE_TAG != 'vX.X.X'
        run: npm version --new-version "${{env.NEW_RELEASE_VERSION}}" --no-git-tag-version
        working-directory: js/api-augment/dist
      - name: Release on NPM @latest
        if: env.NEW_RELEASE_TAG != 'vX.X.X'
        run: npm publish --tag latest --access public
        working-directory: ./js/api-augment/dist
        env:
          NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}
